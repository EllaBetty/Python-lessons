
New Virtual Machine at AWS

3.68.112.65
172.31.11.178

ec2-3-68-112-65.eu-central-1.compute.amazonaws.com

ssh -i Paramiko.pem ubuntu@3.68.112.65

ubuntu@ip-172-31-11-178:~/myproject/myproject$ ls -ltr
total 344
-rwxrwxr-x 1 ubuntu ubuntu    665 Dec  6 11:31 manage.py
drwxrwxr-x 4 ubuntu ubuntu   4096 Dec 13 11:06 venv
drwxrwxr-x 3 ubuntu ubuntu   4096 Dec 13 11:41 myproject
-rw-r--r-- 1 ubuntu ubuntu 167936 Dec 16 06:53 db.sqlite3.backup
-rw-r--r-- 1 ubuntu ubuntu 167936 Dec 16 07:19 db.sqlite3
drwxrwxr-x 4 ubuntu ubuntu   4096 Dec 16 07:23 boards

http://ec2-3-68-112-65.eu-central-1.compute.amazonaws.com:8000/newhome/

sqlite3 --version


Views, Templates, and Static Files


from django.http import HttpResponse
from models import Board

def home(request):
    boards = Board.objects.all()
    boards_names = list()

    for board in boards:
        boards_names.append(board.name)

    response_html = '<br>'.join(boards_names)

    return HttpResponse(response_html)

New URL - list

myproject/urls.py

from django.contrib import admin
from django.urls import path
from django.urls import re_path
from boards import views


urlpatterns = [
   path('', views.emptypath, name="emptypath"),
   path('newhome/', views.newhome, name='newhome'),
   path('oldhome/', views.home, name='home'),
   path('admin/', admin.site.urls),
   path('list/', views.listboards, name='listboards'),
   ]


boards/views.py

from django.http import HttpResponse
from boards.models import Board

def home(request):
    return HttpResponse("Hello, this is our first Application!")
def newhome(request):
    return HttpResponse("And this is another page of ours: Happy NEW Rabbit Year!")

def emptypath(request):
    return HttpResponse("This function handles EMPTY Path")

def listboards(request):
    boards = Board.objects.all()
    boards_names = list()

    for board in boards:
        boards_names.append(board.name)

    response_html = '<br>'.join(boards_names)

    return HttpResponse(response_html)

source venv/bin/activate
python manage.py runserver 0.0.0.0:8000


Template Engine Setup

(venv) ubuntu@ip-172-31-11-178:~/myproject/myproject$ mkdir templates
(venv) ubuntu@ip-172-31-11-178:~/myproject/myproject$ ls -ltr
total 348
-rwxrwxr-x 1 ubuntu ubuntu    665 Dec  6 11:31 manage.py
drwxrwxr-x 4 ubuntu ubuntu   4096 Dec 13 11:06 venv
-rw-r--r-- 1 ubuntu ubuntu 167936 Dec 16 06:53 db.sqlite3.backup
-rw-r--r-- 1 ubuntu ubuntu 167936 Dec 16 07:19 db.sqlite3
drwxrwxr-x 3 ubuntu ubuntu   4096 Jan 27 11:13 myproject
drwxrwxr-x 4 ubuntu ubuntu   4096 Jan 27 11:24 boards
drwxrwxr-x 2 ubuntu ubuntu   4096 Jan 27 11:31 templates


templates/listboards.html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Boards</title>
  </head>
  <body>
    <h1>Boards</h1>

    {% for board in boards %}
      {{ board.name }} <br>
    {% endfor %}

  </body>
</html>

https://jinja.palletsprojects.com/en/3.1.x/

nano myproject/settings.py

'DIRS': [os.path.join(BASE_DIR, 'templates')],

Modify boards.views

from django.shortcuts import render

return render(request, 'listboards.html', {'boards': boards})

 Improve the HTML template to use a table instead:


<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Boards</title>
  </head>
  <body>
    <h1>Boards</h1>

    <table border="1">
      <thead>
        <tr>
          <th>Board</th>
          <th>Posts</th>
          <th>Topics</th>
          <th>Last Post</th>
        </tr>
      </thead>
      <tbody>
        {% for board in boards %}
          <tr>
            <td>
              {{ board.name }}<br>
              <small style="color: #888">{{ board.description }}</small>
            </td>
            <td>0</td>
            <td>0</td>
            <td></td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>


### February, 3rd ####

Automatic Testing of the Homepage
Writing some code to test another piece of code

boards/tests.py

from django.core.urlresolvers import reverse
from django.test import TestCase

class HomeTests(TestCase):
    def test_home_view_status_code(self):
        url = reverse('home')
        response = self.client.get(url)
        self.assertEquals(response.status_code, 200)


simple test case but extremely useful. We are testing the status code of the response. The status code 200 means success.

python manage.py test

In Django 2.0 from django.urls import reverse

DONE OK!!

Static Files Setup
Static files are the CSS, JavaScripts, Fonts, Images, or any other resources we may use to compose the user interface.

in Project root directory, alongside with the boards, templates, and myproject folders, create a new folder named static, and within the static folder create another one named css:

mkdir static

mkdir static/css

We start using Bootstrap

Downloading Bootstrap 4
If you want to download and host Bootstrap 4 yourself, go to https://getbootstrap.com/, and follow the instructions there.

https://getbootstrap.com/docs/4.0/getting-started/download/#compiled-css-and-js

We need bootstrap.min.css

https://github.com/twbs/bootstrap/archive/v4.0.0.zip

 wget https://github.com/twbs/bootstrap/archive/v4.0.0.zip

sudo apt install unzip

ubuntu@ip-172-31-11-178:~$ ls -ltr bootstrap-4.0.0/dist/css/
total 1616
-rw-rw-r-- 1 ubuntu ubuntu 551641 Jan 18  2018 bootstrap.min.css.map
-rw-rw-r-- 1 ubuntu ubuntu 144877 Jan 18  2018 bootstrap.min.css

cp bootstrap-4.0.0/dist/css/bootstrap.min.css myproject/myproject/static/css/

step is to instruct Django where to find the static files. Open the settings.py, scroll to the bottom of the file and just after the STATIC_URL, add the following:

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

have to load the static files (the Bootstrap CSS file) in our template:

templates/home.html

<link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">

#### February 14th ######

sudo apt update
sudo apt upgrade

cd myproject/myproject/

ubuntu@ip-172-31-11-178:~/myproject/myproject$ cat templates/listboards.html 
{% load static %}<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Boards</title>
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
  
  </head>
  <body>
    <h1>Boards</h1>

    <table border="1">
      <thead>
        <tr>
          <th>Board</th>
          <th>Posts</th>
          <th>Topics</th>
          <th>Last Post</th>
        </tr>
      </thead>
      <tbody>
        {% for board in boards %}
          <tr>
            <td>
              {{ board.name }}<br>
              <small style="color: #888">{{ board.description }}</small>
            </td>
            <td>0</td>
            <td>0</td>
            <td></td>
          </tr>
        {% endfor %}
      </tbody>
    </table>
  </body>
</html>


We want nicely formatted HTML output for the empty path

def emptypath(request):
    return HttpResponse("This function handles EMPTY Path")

First, we need an HTML file for that

<!DOCTYPE html>
<html lang="en">
<head>
  <title>Our Django Board</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.3/dist/jquery.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>

<div class="container">
  <div class="jumbotron">
    <h1>Welcome to our Django Project</h1>      
    <p>This is the first welcome page, many others to come...</p>
  </div>
  <p>This is some text.</p>      
  <p>This is another text.</p>      
</div>

</body>
</html>

welcome.html

def emptypath(request):
    #return HttpResponse("This function handles EMPTY Path")
    return render(request, 'welcome.html')


Now a new version of listboards...


The way Django Works...

SQL DB --> Python Code --> HTML Template (using CSS, Bootstrap, etc...) --> User's Browser


Django Project must be customizable without using programming languages...


Introduction to Django Admin

python manage.py createsuperuser

admin
django2023

from boards.models import Board


boards/admin.py

from django.contrib import admin
from boards.models import Board

admin.site.register(Board)